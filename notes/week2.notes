Context Practice 2:

**index.js**

import React from "react"
import ReactDOM from "react-dom"

import App from "./App"
import UserContext from "./userContext"

/**
 * Challenge: Set up context to save the user's username and pass it to anywhere that is currently hardcoding "Username".
 * 
 * Use the static class property `contextType` on any components that need to consume context.
 * https://reactjs.org/docs/context.html
 */

ReactDOM.render(
    <UserContext.Provider value={"bob123"}>
        <App />
    </UserContext.Provider>, 
    document.getElementById("root")
)


**App.js**


import React from "react"

import Header from "./Header"
import UserContext from "./userContext"

function App() {
    return (
        <div>
            <Header />
            <main>
                <UserContext.Consumer>
                    {username => (
                        <p className="main">No new notifications, {username}! ðŸŽ‰</p>
                    )}
                </UserContext.Consumer>
            </main>
        </div>
    )
}

export default App


**userContext.js**

import React from "react"

const UserContext = React.createContext()
export default UserContext

**Header.js**


import React from "react"
import UserContext from "./userContext"

function Header() {
    return (
        <header>
            <UserContext.Consumer>
                {username => (
                    <p>Welcome, {username}!</p>
                )}
            </UserContext.Consumer>
        </header>
    )
}

export default Header






Changing Context:

**index.js**

import React from "react"
import ReactDOM from "react-dom"

import App from "./App"
import {ThemeContextProvider} from "./themeContext"

ReactDOM.render(
    <ThemeContextProvider>
        <App />
    </ThemeContextProvider>, 
    document.getElementById("root")
)


**App.js**


import React from "react"

import Header from "./Header"
import Button from "./Button"

function App() {
    return (
        <div>
            <Header />
            <Button />
        </div>
    )
}

export default App



**themeContext.js**

import React, {Component} from "react"
const {Provider, Consumer} = React.createContext()

/**
 * Challenge:
 * 1) Add state to hold the current theme
 * 2) Add a method for flipping the state between light and dark
 * 
 */

class ThemeContextProvider extends Component {
    state = {
        theme: "dark"
    }
    
    toggleTheme = () => {
        this.setState(prevState => {
            return {
                theme: prevState.theme === "light" ? "dark" : "light"
            }
        })
    }
    
    render() {
        return (
            <Provider value={{theme: this.state.theme, toggleTheme: this.toggleTheme}}>
                {this.props.children}
            </Provider>
        )
    }
}

export {ThemeContextProvider, Consumer as ThemeContextConsumer}


**Button.js**

import React from "react"
import {ThemeContextConsumer} from "./themeContext"

function Button(props) {
    return (
        <ThemeContextConsumer>
            {context => (
                <button onClick={context.toggleTheme} className={`${context.theme}-theme`}>Switch Theme</button>
            )}
        </ThemeContextConsumer>
    )    
}

export default Button




**Header.js**

import React, {Component} from "react"
import {ThemeContextConsumer} from "./themeContext"

function Header(props) {
    return (
        <ThemeContextConsumer>
            {context => (
                <header className={`${context.theme}-theme`}>
                    <h2>{context.theme === "light" ? "Light" : "Dark"} Theme</h2>
                </header>
            )}
        </ThemeContextConsumer>
    )    
}

export default Header




Context Practice:

//(https://reactjs.org/docs/forms.html#controlled-components)
//(https://scrimba.com/p/p7P5Hd/cW8Jdfy)

**App.js**


import React from "react"

import Header from "./Header"
import {UserContextConsumer} from "./userContext"

class App extends React.Component {
    state = {
        newUsername: ""
    }
    
    handleChange = (e) => {
        const {name, value} = e.target
        this.setState({[name]: value})
    }
    
    render() {    
        return (
            <div>
                <Header />
                    <UserContextConsumer>
                        {({username, changeUsername}) => (
                            <main>  
                                <p className="main">No new notifications, {username}! ðŸŽ‰</p>
                                <input
                                    type="text"
                                    name="newUsername"
                                    placeholder="New username"
                                    value={this.state.newUsername}
                                    onChange={this.handleChange}
                                />
                                <button onClick={() => changeUsername(this.state.newUsername)}>Change Username</button>
                            </main> 
                        )}
                    </UserContextConsumer>
            </div>
        )
    }
}

export default App


**userContext.js**

import React from "react"

const {Provider, Consumer} = React.createContext()

class UserContextProvider extends React.Component {
    state = {
        username: "bob123"
    }
    
    changeUsername = (username) => {
        this.setState({username})
    }
    
    render() {
        const {username} = this.state
        return (
            <Provider value={{username, changeUsername: this.changeUsername}}>
                {this.props.children}
            </Provider>
        )
    }
}

export {UserContextProvider, Consumer as UserContextConsumer}

**Header.js**

import React from "react"
import {UserContextConsumer} from "./userContext"

function Header() {
    return (
        <header>
            <UserContextConsumer>
                {({username}) => (
                    <p>Welcome, {username}!</p>
                )}
            </UserContextConsumer>
        </header>
    )
}

export default Header


**index.js**

import React from "react"
import ReactDOM from "react-dom"

import App from "./App"
import {UserContextProvider} from "./userContext"

ReactDOM.render(
    <UserContextProvider>
        <App />
    </UserContextProvider>, 
    document.getElementById("root")
)



