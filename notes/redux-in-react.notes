Redux in React - Setup & Practice:

**index.js**
import React from "react"
import ReactDOM from "react-dom"

import App from "./App"

ReactDOM.render(<App />, document.getElementById("root"))

#redux folder
**index.js**

import redux, {createStore} from "redux"

function increment() {
    return {
        type: "INCREMENT"
    }
}

function decrement() {
    return {
        type: "DECREMENT"
    }
}

function reducer(count = 0, action) {
    switch(action.type) {
        case "INCREMENT":
            return count + 1
        case "DECREMENT":
            return count - 1
        default:
            return count
    }
}

const store = createStore(reducer)
store.subscribe(() => console.log(store.getState()))
export default store






Redux in React - react-redux & provider:

**index.js**

import React from "react"
import ReactDOM from "react-dom"
import {Provider} from "react-redux"
import store from "./redux"

import App from "./App"

ReactDOM.render(
    <Provider store={store}>
        <App />
    </Provider>, 
    document.getElementById("root")
)





Redux in React - connect():

**App.js**


import React from "react"
import {connect} from "react-redux"

function App(props) {    
    return (
        <div>
            <h1>COUNT GOES HERE</h1>
            <button>-</button>
            <button>+</button>
        </div>
    )
}

export default connect(/* What parts of state do you want? */, /* What actions to dispatch? */)(App)






Redux in React - mapStateToProps:

import React from "react"
import {connect} from "react-redux"

function App(props) {    
    return (
        <div>
            <h1>{props.count}</h1>
            <button>-</button>
            <button>+</button>
        </div>
    )
}

// Write the mapStateToProps function from scratch
// Takes the global state from Redux as a parameter
// returns an object where the keys are the name of the prop your component wants,
// and the values are the actual parts of the global state your component wants
function mapStateToProps(state) {
    return {
        count: state
    }
}


export default connect(mapStateToProps, {})(App)





Redux in React - mapDispatchToProps:

import React from "react"
import {connect} from "react-redux"
import {increment, decrement} from "./redux"

function App(props) {    
    return (
        <div>
            <h1>{props.count}</h1>
            <button onClick={props.decrement}>-</button>
            <button onClick={props.increment}>+</button>
        </div>
    )
}

// https://react-redux.js.org/api/connect#connect

export default connect(state => ({count: state}), {increment, decrement})(App)









Redux in React - useSelector():


import React from "react"
import {useSelector} from "react-redux"
import {increment, decrement} from "./redux"

function App(props) {
    const count = useSelector(state => state)     
    return (
        <div>
            <h1>{count}</h1>
            <button onClick={props.decrement}>-</button>
            <button onClick={props.increment}>+</button>
        </div>
    )
}

// export default connect(state => ({count: state}), {increment, decrement})(App)
export default App







Redux in React - useDispatch():

**index.js**

import React from "react"
import ReactDOM from "react-dom"
import {Provider} from "react-redux"
import store from "./redux"

import App from "./App"

ReactDOM.render(
    <Provider store={store}>
        <App />
    </Provider>, 
    document.getElementById("root")
)

**App.js**

import React from "react"
import {useSelector, useDispatch} from "react-redux"
import {increment, decrement} from "./redux"

function App(props) {
    const count = useSelector(state => state)
    const dispatch = useDispatch()
    return (
        <div>
            <h1>{count}</h1>
            <button onClick={() => dispatch(decrement())}>-</button>
            <button onClick={() => dispatch(increment())}>+</button>
        </div>
    )
}

export default App

// https://thoughtbot.com/blog/using-redux-with-react-hooks
// https://react-redux.js.org/api/hooks#usage-warnings


#redux folder
**index.js**

import redux, {createStore} from "redux"

export function increment() {
    return {
        type: "INCREMENT"
    }
}

export function decrement() {
    return {
        type: "DECREMENT"
    }
}

function reducer(count = 0, action) {
    switch(action.type) {
        case "INCREMENT":
            return count + 1
        case "DECREMENT":
            return count - 1
        default:
            return count
    }
}

const store = createStore(reducer)
store.subscribe(() => console.log(store.getState()))
export default store




Redux in React - Redux Thunk:

#redux folder
**index.js**

import redux, {createStore, applyMiddleware} from "redux"
import thunk from "redux-thunk"

export function increment() {
    return (dispatch, getState) => {
        const currentCount = getState()
        if(currentCount % 2 === 0) {
            dispatch({type: "INCREMENT"})
        } else {
            setTimeout(() => {
                dispatch({type: "INCREMENT"})
            }, 1500)
        }
    }
}

export function decrement() {
    return {
        type: "DECREMENT"
    }
}

function reducer(count = 0, action) {
    switch(action.type) {
        case "INCREMENT":
            return count + 1
        case "DECREMENT":
            return count - 1
        default:
            return count
    }
}

const store = createStore(reducer, applyMiddleware(thunk))
store.subscribe(() => console.log(store.getState()))
export default store








#API call

// https://github.com/reduxjs/redux-thunk#installation

import redux, {createStore, applyMiddleware} from "redux"
import thunk from "redux-thunk"

export function increment() {
    return (dispatch, getState) => {
        const number = getState()
        const baseUrl = "https://swapi.co/api/people"
        fetch(`${baseUrl}/${number}`)
            .then(res => res.json())
            .then(res => {
                console.log(res)
                dispatch({
                    type: "INCREMENT",
                    payload: res
                })
            })
    }
}

/**

{name: "C-3PO", height: "167", mass: "75", hair_color: "n/a", skin_color: "gold", eye_color: "yellow", birth_year: "112BBY", gender: "n/a", homeworld: "https://swapi.co/api/planets/1/", films: ["https://swapi.co/api/films/2/", "https://swapi.co/api/films/5/", "https://swapi.co/api/films/4/", "https://swapi.co/api/films/6/", "https://swapi.co/api/films/3/", "https://swapi.co/api/films/1/"], species: ["https://swapi.co/api/species/2/"], vehicles: [], starships: [], created: "2014-12-10T15:10:51.357000Z", edited: "2014-12-20T21:17:50.309000Z", url: "https://swapi.co/api/people/2/"}

 */

export function decrement() {
    return {
        type: "DECREMENT"
    }
}

function reducer(count = 0, action) {
    switch(action.type) {
        case "INCREMENT":
            return count + 1
        case "DECREMENT":
            return count - 1
        default:
            return count
    }
}

const store = createStore(reducer, applyMiddleware(thunk))
store.subscribe(() => console.log(store.getState()))
export default store
